// Generated by CoffeeScript 1.6.3

/* NB in OpenOffice:   importClass          org.mozilla.javascript.Context ??? */


/* NB in LibreOffice:  importClass Packages.org.mozilla.javascript.Context ??? */

(function() {
  var CHR, GLOBAL, TRM, TYPES, font_name_by_rsg, font_name_from_chr_info, font_name_from_rsg, format_cell_by_content, log, my_out, njs_util, prefix, read_cells, require, rpr, show_cid, show_objects, show_text_cids, string_from_stream, test_format_cells, xray,
    __slice = [].slice;

  importClass(Packages.org.mozilla.javascript.Context);

  importClass(Packages.org.mozilla.javascript.tools.shell.Global);

  GLOBAL = new Global(Context.enter());

  require = function(route) {
    var R, error, idx, line, source, _i, _len, _ref;
    if (!/\js$/.test(route)) {
      route = route + '.js';
    }
    source = GLOBAL.readFile(route);
    source = require.head.concat(source, require.tail);
    try {
      R = eval(source);
    } catch (_error) {
      error = _error;
      _ref = source.split('\n');
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        line = _ref[idx];
        GLOBAL.print(idx + 1, '  ', line);
      }
    }
    return eval(source);
  };

  require.head = "(function() {\nvar exports = {};\nvar module  = { 'exports': exports };\n(function() {\n\n";

  require.tail = "\n}).call( module.exports );\nreturn module.exports;\n})();";

  prefix = '/Volumes/Storage/cnd/node_modules/coffeelibre/lib/';

  require(prefix + 'import-classes');

  CHR = require(prefix + 'coffeenode-chr');

  TYPES = require(prefix + 'coffeenode-types');

  font_name_by_rsg = require(prefix + 'font-name-by-rsg');

  njs_util = require(prefix + 'nodejs-util');

  TRM = {};

  TRM.dir = function(message, x) {
    var key, keys, _i, _len;
    log('');
    log('----------------------------------');
    log(message);
    log('');
    keys = ((function() {
      var _results;
      _results = [];
      for (key in x) {
        _results.push(key);
      }
      return _results;
    })()).sort();
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      log('*', key);
    }
    return null;
  };

  log = function() {
    var P, p;
    P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return GLOBAL.print(((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = P.length; _i < _len; _i++) {
        p = P[_i];
        _results.push(TYPES.isa_text(p) ? p : rpr(p));
      }
      return _results;
    })()).join(' '));
  };

  rpr = function(x) {
    var error, type;
    try {
      return njs_util.inspect(x, rpr.options);
    } catch (_error) {
      error = _error;
      type = TYPES.type_of(x);
      return "unable to serialize object of type " + type + "; message: " + (rpr(error['message']));
    }
  };

  rpr.options = {
    showHidden: false,
    depth: 4,
    colors: true,
    customInspect: false
  };

  xray = function(x) {
    return njs_util.inspect(x, xray.options);
  };

  xray.options = {
    showHidden: true,
    depth: 42,
    colors: true,
    customInspect: false
  };

  this.get_current_doc = function() {
    var oDoc;
    return oDoc = XSCRIPTCONTEXT.getDocument();
  };

  this.get_undo_manager = function(doc) {
    return (UnoRuntime.queryInterface(XUndoManagerSupplier, doc)).getUndoManager();
  };

  this._get_spreadsheet_doc = function(doc) {
    return UnoRuntime.queryInterface(XSpreadsheetDocument, doc);
  };

  this.get_sheets = function(doc) {
    var R, idx, sheet, sheet_name, sheets_by_name, _i, _ref;
    R = [];
    sheets_by_name = (this._get_spreadsheet_doc(doc)).getSheets();
    for (idx = _i = 0, _ref = sheets_by_name.elementNames.length; 0 <= _ref ? _i < _ref : _i > _ref; idx = 0 <= _ref ? ++_i : --_i) {
      sheet_name = sheets_by_name.elementNames[idx];
      sheet = sheets_by_name.getByName(sheet_name);
      R[sheet_name] = sheet;
      R[idx] = sheet;
    }
    return R;
  };

  this.get_sheet = function(doc_or_sheets, name_or_idx) {
    throw 'XXXXXXXX';
  };

  this._get_sheet_from_name = function(doc, name) {
    throw 'XXXXXXXX';
  };

  this._get_sheet_from_idx = function(doc, idx) {
    return (this.get_sheets(doc))[idx];
  };

  this.get_current_sheet_name = function(doc) {

    /* Not sure whether it has to be **this** convoluted, but then, here we are, doing OOo... */
    var controller, model, sheet, view;
    model = UnoRuntime.queryInterface(XModel, doc);
    controller = model.getCurrentController();
    view = UnoRuntime.queryInterface(XSpreadsheetView, controller);
    sheet = view.getActiveSheet();
    sheet = UnoRuntime.queryInterface(XNamed, sheet);
    return sheet.name;
  };

  this.get_current_sheet = function(doc) {
    return (this.get_sheets(doc))[this.get_current_sheet_name(doc)];
  };

  this.get_current_selection = function(doc) {
    var R;
    R = this._get_current_selection(doc);
    return [[R.StartColumn, R.StartRow], [R.EndColumn, R.EndRow]];
  };

  this._get_current_selection = function(doc) {

    /* OOo's API is sometimes quite terse and almost intuitive. To obtain the value displayed in the tool bar
    coordinates box—the address of the current selection—a simple one-liner suffices:
    
        UnoRuntime.queryInterface XCellRangeAddressable, \
          ( UnoRuntime.queryInterface XModel, doc ).getCurrentSelection()
     */
    var R, model;
    model = UnoRuntime.queryInterface(XModel, doc);
    R = model.getCurrentSelection();
    R = UnoRuntime.queryInterface(XCellRangeAddressable, R);
    return R.rangeAddress;
  };

  this.get_current_cells = function(doc) {
    var R, sheet, x, x0, x1, y, y0, y1, _i, _j, _ref, _ref1, _ref2;
    R = [];
    sheet = this.get_current_sheet(doc);
    _ref = this.get_current_selection(doc), (_ref1 = _ref[0], x0 = _ref1[0], y0 = _ref1[1]), (_ref2 = _ref[1], x1 = _ref2[0], y1 = _ref2[1]);
    for (y = _i = y0; y0 <= y1 ? _i <= y1 : _i >= y1; y = y0 <= y1 ? ++_i : --_i) {
      for (x = _j = x0; x0 <= x1 ? _j <= x1 : _j >= x1; x = x0 <= x1 ? ++_j : --_j) {
        R.push(this.get_cell(sheet, x, y));
      }
    }
    return R;
  };

  this.get_cell = function(sheet, x, y) {
    return sheet.getObject().getCellByPosition(x, y);
  };

  this.get_cell_text = function(cell) {

    /* Return the cell value as text. If the formula text starts with a single-quote character, we elide
    it; it is just OOo's fancy way of saying 'this is a digit but not a number'.
     */
    return ('' + cell.getFormula()).replace(/^'/, '');
  };

  this.format_cell = function(cell, options) {
    var pv, value;
    pv = UnoRuntime.queryInterface(XPropertySet, cell);
    if ((value = options['font-name']) != null) {
      pv.setPropertyValue('CharFontName', value);
      pv.setPropertyValue('CharFontNameAsian', value);
    }
    if ((value = options['font-size']) != null) {
      pv.setPropertyValue('CharHeight', value);
      pv.setPropertyValue('CharHeightAsian', value);
    }
    if ((value = options['background-color']) != null) {
      if (value === 'transparent') {

        /* NB no need to wrap Booleans with new java.lang.Boolean */
        pv.setPropertyValue('IsCellBackgroundTransparent', true);
      } else {
        pv.setPropertyValue('IsCellBackgroundTransparent', false);
        pv.setPropertyValue('CellBackColor', new java.lang.Integer(value));
      }
    }
    if ((value = options['text-wrap']) != null) {
      pv.setPropertyValue('IsTextWrapped', value);
    }
    if ((value = options['horizontal-align']) != null) {
      pv.setPropertyValue('HoriJustify', value);
    }
    if ((value = options['vertical-align']) != null) {
      pv.setPropertyValue('VertJustify', value);
    }
    return null;
  };

  this.range_ref_from_xy = function(xy0, xy1) {
    return (this.cell_ref_from_xy.apply(this, xy0)).concat(':', this.cell_ref_from_xy.apply(this, xy1));
  };

  this.cell_ref_from_xy = function(x, y, x_is_relative, y_is_relative) {
    if (x_is_relative == null) {
      x_is_relative = true;
    }
    if (y_is_relative == null) {
      y_is_relative = true;
    }
    return (this.xref_from_x(x, x_is_relative)) + (this.yref_from_y(y, y_is_relative));
  };

  this.xref_from_x = function(x, is_relative) {
    var R, last_idx;
    if (is_relative == null) {
      is_relative = true;
    }
    R = x.toString(26);
    last_idx = R.length - 1;
    R = R.replace(/[0-9]/g, function(digit, idx) {
      return String.fromCharCode(0x11 + (digit.charCodeAt(0)) - (idx === last_idx ? 0 : 1));
    });
    R = R.replace(/[a-z]/g, function(letter, idx) {
      return String.fromCharCode((letter.charCodeAt(0)) - 0x16 - (idx === last_idx ? 0 : 1));
    });
    if (is_relative) {
      return R;
    } else {
      return '$' + R;
    }
  };

  this.yref_from_y = function(y, is_relative) {
    var R;
    if (is_relative == null) {
      is_relative = true;
    }
    R = (y + 1).toString(10);
    if (is_relative) {
      return R;
    } else {
      return '$' + R;
    }
  };

  this.get_text_range = function() {
    var oDoc, xText, xTextDoc, xTextRange;
    throw 'XXXXXXXX';
    oDoc = this.get_current_doc();
    xTextDoc = UnoRuntime.queryInterface(XTextDocument, oDoc);
    xText = xTextDoc.getText();
    return xTextRange = xText.getEnd();
  };

  this.set_text = function(text) {
    var text_range;
    throw 'XXXXXXXX';
    text_range = this.get_text_range();
    text_range.setString(text);
    return null;
  };

  test_format_cells = function() {
    var cell, cell_text, chr_info, column, fncr, row, _i, _results;
    column = 2;
    _results = [];
    for (row = _i = 20; _i <= 32; row = ++_i) {
      cell = get_cell(column, row);
      format_cell_by_content(cell);
      cell_text = get_cell_text(cell);
      if (cell_text.length === 0) {
        log("skipped empty cell " + (this.cell_ref_from_xy(column, row)));
        continue;
      }
      chr_info = CHR.analyze(cell_text, {
        input: 'xncr'
      });
      cell.setFormula(CHR._unicode_chr_from_cid(chr_info['cid']));
      log(chr_info['chr']);
      cell = get_cell(column + 1, row);
      fncr = chr_info['fncr'];
      fncr = fncr.replace(/^u-pua-/, 'jzr-fig-');
      _results.push(cell.setFormula(fncr));
    }
    return _results;
  };

  show_text_cids = function(text) {
    var idx, _i, _ref, _results;
    _results = [];
    for (idx = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; idx = 0 <= _ref ? ++_i : --_i) {
      _results.push(log(text[idx] + ': 0x' + (text.charCodeAt(idx)).toString(16)));
    }
    return _results;
  };

  show_cid = function() {
    var chr_info, cid, cid_hex, fncr, row, source_cell, target_cell, text_cesu8, _i, _results;
    _results = [];
    for (row = _i = 3; _i <= 4; row = ++_i) {
      source_cell = get_cell(1, row);
      target_cell = get_cell(2, row);
      text_cesu8 = get_cell_text(source_cell);
      cid = CHR.as_cid(text_cesu8);
      cid_hex = cid.toString(16);
      fncr = CHR.as_fncr(cid);
      chr_info = CHR.analyze(cid);
      _results.push(target_cell.setFormula(fncr));
    }
    return _results;
  };

  font_name_from_rsg = function(rsg, fallback) {

    /* TAINT should use chr-info or CID, since we might have to format with codepoint granularity. */
    var R;
    R = font_name_by_rsg[rsg];
    if (R == null) {
      if (fallback !== void 0) {
        return fallback;
      }
      throw new Error("unable to find a suitable font for RSG " + (rpr(rsg)));
    }
    return R;
  };

  font_name_from_chr_info = function(chr_info, fallback) {
    var R, rsg;
    rsg = chr_info['rsg'];
    R = font_name_by_rsg[rsg];
    if (R == null) {
      if (fallback !== void 0) {
        return fallback;
      }
      throw new Error("unable to find a suitable font for " + chr_info['fncr'] + " " + chr_info['chr']);
    }
    return R;
  };

  format_cell_by_content = function(cell) {
    var chr_info, font_name, rsg, text;
    text = get_cell_text(cell);
    if (text.length === 0) {
      return null;
    }
    chr_info = CHR.analyze(text, {
      input: 'xncr'
    });
    rsg = chr_info['rsg'];
    font_name = font_name_from_rsg(rsg);
    return this.format_cell(cell, {
      'font-name': font_name,
      'font-size': 14
    });
  };

  this.show_formatting = function() {
    var cell, cell_text, name, pv;
    cell = get_cell(1, 1);
    cell.setFormula(((function() {
      var _results;
      _results = [];
      for (name in cell) {
        _results.push(name);
      }
      return _results;
    })()).join(', '));
    cell = get_cell(1, 2);
    pv = UnoRuntime.queryInterface(XPropertySet, cell);
    cell.setFormula(((function() {
      var _results;
      _results = [];
      for (name in pv) {
        _results.push(name);
      }
      return _results;
    })()).join(', '));
    pv.setPropertyValue('CharHeight', 14);
    pv.setPropertyValue('CharFontName', 'Sun-ExtA');
    cell = get_cell(1, 3);
    pv = UnoRuntime.queryInterface(XPropertySet, cell);
    pv.setPropertyValue('CharHeight', 14);
    log("CharFontName:              " + (pv.getPropertyValue('CharFontName')));
    log("CharFontStyleName:         " + (pv.getPropertyValue('CharFontStyleName')));
    log("CharFontFamily:            " + (pv.getPropertyValue('CharFontFamily')));
    log("CharFontCharSet:           " + (pv.getPropertyValue('CharFontCharSet')));
    log("CharFontNameAsian:         " + (pv.getPropertyValue('CharFontNameAsian')));
    log("CharFontStyleNameAsian:    " + (pv.getPropertyValue('CharFontStyleNameAsian')));
    log("CharFontFamilyAsian:       " + (pv.getPropertyValue('CharFontFamilyAsian')));
    log("CharFontCharSetAsian:      " + (pv.getPropertyValue('CharFontCharSetAsian')));
    log("CharFontNameComplex:       " + (pv.getPropertyValue('CharFontNameComplex')));
    log("CharFontStyleNameComplex:  " + (pv.getPropertyValue('CharFontStyleNameComplex')));
    log("CharFontFamilyComplex:     " + (pv.getPropertyValue('CharFontFamilyComplex')));
    log("CharFontCharSetComplex:    " + (pv.getPropertyValue('CharFontCharSetComplex')));
    cell_text = get_cell_text(cell);
    pv.setPropertyValue('CharFontName', 'Sun-ExtA');
    pv.setPropertyValue('CharFontNameAsian', 'Sun-ExtA');
    pv.setPropertyValue('CharHeight', 14);
    pv.setPropertyValue('CharHeightAsian', 14);
    show_cid();
    dir('cell', cell);
    return pv = UnoRuntime.queryInterface(XPropertySet, cell);
  };

  read_cells = function(sheet, rows, columns) {
    var ar, cell, content, i, k, masterArray;
    masterArray = [];
    i = 0;
    while (i < rows) {
      ar = [];
      k = 0;
      while (k < columns) {
        cell = sheet.getObject().getCellByPosition(k, i);
        content = cell.getFormula();
        if (content.indexOf(",") !== -1) {
          ar.push("\"" + content + "\"");
        } else {
          ar.push(content);
        }
        k++;
      }
      masterArray.push(ar);
      i++;
    }
    return masterArray;
  };

  show_objects = function() {
    log('###################################################################################################');
    dir('Packages', Packages);
    dir('Packages.com.sun.star.text', Packages.com.sun.star.text);
    dir('Packages.com.sun.star.sheet', Packages.com.sun.star.sheet);
    dir('Packages.com.sun.star.script', Packages.com.sun.star.uno.script);
    dir('Packages.com.sun.star.uno.UnoRuntime', Packages.com.sun.star.uno.UnoRuntime);
    dir('XSCRIPTCONTEXT', XSCRIPTCONTEXT);
    dir('CHR', CHR);
    return log((new Date()).toString());
  };

  this.main2 = function() {
    var editor, masterArray, oDoc, pane, sheet1, sheets, text, xSDoc;
    oDoc = XSCRIPTCONTEXT.getDocument();
    xSDoc = UnoRuntime.queryInterface(XSpreadsheetDocument, oDoc);
    sheets = xSDoc.getSheets();
    sheet1 = sheets.getByName("Sheet1");
    editor = new EditorPane();
    pane = editor.getPane();
    masterArray = read_cells(sheet1, 100, 8);
    text = masterArray.join("\n");
    return pane.setText(text);
  };

  this.main = function() {
    var UNDO, doc;
    log('');
    log('©42 --------------------------------------------------------------------------------------------');
    log((new Date()).toString());
    doc = this.get_current_doc();
    UNDO = this.get_undo_manager(doc);
    UNDO.enterUndoContext('format tree');
    try {
      this.format_tree();
    } finally {
      UNDO.leaveUndoContext();
    }
    return null;
  };

  this.format_tree = function() {
    var cell, cell_ref, chr_info, cid, cjk_background_color, doc, empty_background_color, fallback_font_name, fallback_font_size, fncr, fncr_cell, fncr_font_name, fncr_font_size, fncr_format_options, font_name, format_options, is_cjk, rsg, selection, sheet, source_cell, source_text, tree_background_color, x, x0, x1, x2, xy0, xy1, y, y0, y1, _i, _j, _ref, _ref1, _ref2, _ref3;
    fallback_font_name = 'Sun-ExtA';
    fallback_font_size = 14;
    tree_background_color = 'transparent';
    cjk_background_color = 0x6ec1cc;
    empty_background_color = 'transparent';
    fncr_font_name = 'Adobe Garamond Pro';
    fncr_font_size = 8;
    fncr_format_options = {
      'font-name': fncr_font_name,
      'font-size': fncr_font_size,
      'text-wrap': false,
      'vertical-align': CellVertJustify.CENTER,
      'horizontal-align': CellHoriJustify.LEFT
    };
    doc = this.get_current_doc();
    sheet = this.get_current_sheet(doc);
    cell = this.get_cell(sheet, 0, 0);
    selection = this.get_current_selection(doc);
    _ref = this.get_current_selection(doc), xy0 = _ref[0], xy1 = _ref[1];
    _ref1 = [xy0, xy1], (_ref2 = _ref1[0], x0 = _ref2[0], y0 = _ref2[1]), (_ref3 = _ref1[1], x1 = _ref3[0], y1 = _ref3[1]);
    log(xy0, xy1);
    log("current selection: " + (this.range_ref_from_xy(xy0, xy1)));
    x2 = x1 + 2;
    for (y = _i = y0; y0 <= y1 ? _i <= y1 : _i >= y1; y = y0 <= y1 ? ++_i : --_i) {
      fncr_cell = this.get_cell(sheet, x2, y);
      for (x = _j = x0; x0 <= x1 ? _j <= x1 : _j >= x1; x = x0 <= x1 ? ++_j : --_j) {
        source_cell = this.get_cell(sheet, x, y);
        source_text = this.get_cell_text(source_cell);
        cell_ref = this.cell_ref_from_xy(x, y);
        if (source_text.length === 0) {
          format_options = {
            'font-name': fallback_font_name,
            'font-size': fallback_font_size,
            'background-color': empty_background_color,
            'text-wrap': false,
            'vertical-align': CellVertJustify.CENTER,
            'horizontal-align': CellHoriJustify.CENTER
          };
        } else {
          cid = CHR.as_cid(source_text, {
            input: 'xncr'
          });
          chr_info = CHR.analyze(cid);
          fncr = chr_info['fncr'];
          rsg = chr_info['rsg'];
          fncr = fncr.replace(/^u-pua-/, 'jzr-fig-');
          rsg = rsg.replace(/^u-pua$/, 'jzr-fig');
          is_cjk = /^(u-cjk|jzr-fig|u-pua)/.test(rsg);
          if (rsg === 'jzr-fig') {
            source_cell.setFormula(CHR._unicode_chr_from_cid(cid));
          }
          if (is_cjk) {
            fncr_cell.setFormula(fncr);
            this.format_cell(fncr_cell, fncr_format_options);
          }
          font_name = font_name_from_chr_info(chr_info, fallback_font_name);
          log('©32s', rpr(source_text));
          log('©32s', cell_ref, fncr, rsg, is_cjk, font_name);
          format_options = {
            'font-name': font_name,
            'font-size': fallback_font_size,
            'text-wrap': false,
            'vertical-align': CellVertJustify.CENTER,
            'horizontal-align': CellHoriJustify.CENTER
          };

          /* provide background color if cell contains a CJK character: */
          if (is_cjk) {
            format_options['background-color'] = cjk_background_color;
          } else {
            format_options['font-size'] = 16;
            format_options['background-color'] = tree_background_color;
          }
        }
        this.format_cell(source_cell, format_options);
      }
    }
    log((new Date()).toString());
    return log('ok');
  };

  this.f = function() {
    var context, invocation_context, meta_data, path_settings, script_container, script_context, script_provider, script_uri_helper, service_manager;
    context = XSCRIPTCONTEXT.getComponentContext();
    service_manager = context.getServiceManager();
    path_settings = service_manager.createInstanceWithContext('com.sun.star.util.PathSettings', context);
    path_settings = UnoRuntime.queryInterface(XPropertySet, path_settings);
    script_provider = service_manager.createInstanceWithContext('com.sun.star.script.provider.ScriptProviderForJavaScript', context);
    meta_data = service_manager.createInstanceWithContext('com.sun.star.script.framework.container.ScriptMetaData', context);
    script_uri_helper = service_manager.createInstanceWithContext('com.sun.star.script.provider.ScriptURIHelper', context);
    script_uri_helper = UnoRuntime.queryInterface(XScriptURIHelper, script_uri_helper);
    script_context = script_provider.getScriptingContext();
    invocation_context = XSCRIPTCONTEXT.getInvocationContext();
    TRM.dir('XSCRIPTCONTEXT', XSCRIPTCONTEXT);
    script_container = invocation_context.getScriptContainer();
    script_container = UnoRuntime.queryInterface(XInvocation2, script_container);
    TRM.dir('script_container', script_container);
    TRM.dir('script_uri_helper', script_uri_helper);
    return TRM.dir('meta_data', meta_data);
  };

  string_from_stream = function(stream, encoding) {
    if (encoding == null) {
      encoding = 'utf-8';
    }
    return '' + stream.toString();
  };

  my_out = new StringWriter();

  log(GLOBAL.runCommand('ls', '/tmp', {
    output: my_out
  }));

  log('©29f', string_from_stream(my_out));

  this.main();

}).call(this);
