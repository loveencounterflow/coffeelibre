// Generated by CoffeeScript 1.6.3
(function() {
  this.get_current_doc = function() {
    var oDoc;
    return oDoc = XSCRIPTCONTEXT.getDocument();
  };

  this.get_undo_manager = function(doc) {
    return (UnoRuntime.queryInterface(XUndoManagerSupplier, doc)).getUndoManager();
  };

  this.step = function(doc, title, action) {

    /* Perform an atomic, undoable action. */
    var UNDO;
    UNDO = this.get_undo_manager(doc);
    UNDO.enterUndoContext(title);
    try {
      action();
    } finally {
      UNDO.leaveUndoContext();
    }
    return null;
  };

  this._get_spreadsheet_doc = function(doc) {
    return UnoRuntime.queryInterface(XSpreadsheetDocument, doc);
  };

  this.get_sheets = function(doc) {
    var R, idx, sheet, sheet_name, sheets_by_name, _i, _ref;
    R = [];
    sheets_by_name = (this._get_spreadsheet_doc(doc)).getSheets();
    for (idx = _i = 0, _ref = sheets_by_name.elementNames.length; 0 <= _ref ? _i < _ref : _i > _ref; idx = 0 <= _ref ? ++_i : --_i) {
      sheet_name = sheets_by_name.elementNames[idx];
      sheet = sheets_by_name.getByName(sheet_name);
      R[sheet_name] = sheet;
      R[idx] = sheet;
    }
    return R;
  };

  this.get_sheet = function(doc_or_sheets, name_or_idx) {
    throw 'XXXXXXXX';
  };

  this._get_sheet_from_name = function(doc, name) {
    throw 'XXXXXXXX';
  };

  this._get_sheet_from_idx = function(doc, idx) {
    return (this.get_sheets(doc))[idx];
  };

  this.get_current_sheet_name = function(doc) {

    /* Not sure whether it has to be **this** convoluted, but then, here we are, doing OOo... */
    var controller, model, sheet, view;
    model = UnoRuntime.queryInterface(XModel, doc);
    controller = model.getCurrentController();
    view = UnoRuntime.queryInterface(XSpreadsheetView, controller);
    sheet = view.getActiveSheet();
    sheet = UnoRuntime.queryInterface(XNamed, sheet);
    return sheet.name;
  };

  this.get_current_sheet = function(doc) {
    return (this.get_sheets(doc))[this.get_current_sheet_name(doc)];
  };

  this.get_current_selection = function(doc) {
    var R;
    R = this._get_current_selection(doc);
    return [[R.StartColumn, R.StartRow], [R.EndColumn, R.EndRow]];
  };

  this._get_current_selection = function(doc) {

    /* OOo's API is sometimes quite terse and almost intuitive. To obtain the value displayed in the tool bar
    coordinates box—the address of the current selection—a simple one-liner suffices:
    
        UnoRuntime.queryInterface XCellRangeAddressable, \
          ( UnoRuntime.queryInterface XModel, doc ).getCurrentSelection()
     */
    var R, model;
    model = UnoRuntime.queryInterface(XModel, doc);
    R = model.getCurrentSelection();
    R = UnoRuntime.queryInterface(XCellRangeAddressable, R);
    return R.rangeAddress;
  };

  this.get_current_cells = function(doc) {
    var R, sheet, x, x0, x1, y, y0, y1, _i, _j, _ref, _ref1, _ref2;
    R = [];
    sheet = this.get_current_sheet(doc);
    _ref = this.get_current_selection(doc), (_ref1 = _ref[0], x0 = _ref1[0], y0 = _ref1[1]), (_ref2 = _ref[1], x1 = _ref2[0], y1 = _ref2[1]);
    for (y = _i = y0; y0 <= y1 ? _i <= y1 : _i >= y1; y = y0 <= y1 ? ++_i : --_i) {
      for (x = _j = x0; x0 <= x1 ? _j <= x1 : _j >= x1; x = x0 <= x1 ? ++_j : --_j) {
        R.push(this.get_cell(sheet, x, y));
      }
    }
    return R;
  };

  this.get_cell = function(sheet, x, y) {
    return sheet.getObject().getCellByPosition(x, y);
  };

  this.get_cell_text = function(cell) {

    /* Return the cell value as text. If the formula text starts with a single-quote character, we elide
    it; it is just OOo's fancy way of saying 'this is a digit but not a number'.
     */
    return ('' + cell.getFormula()).replace(/^'/, '');
  };

  this.format_cell = function(cell, options) {
    var pv, value;
    pv = UnoRuntime.queryInterface(XPropertySet, cell);
    if ((value = options['font-name']) != null) {
      pv.setPropertyValue('CharFontName', value);
      pv.setPropertyValue('CharFontNameAsian', value);
    }
    if ((value = options['font-size']) != null) {
      pv.setPropertyValue('CharHeight', value);
      pv.setPropertyValue('CharHeightAsian', value);
    }
    if ((value = options['background-color']) != null) {
      if (value === 'transparent') {

        /* NB no need to wrap Booleans with new java.lang.Boolean */
        pv.setPropertyValue('IsCellBackgroundTransparent', true);
      } else {
        pv.setPropertyValue('IsCellBackgroundTransparent', false);
        pv.setPropertyValue('CellBackColor', new java.lang.Integer(value));
      }
    }
    if ((value = options['text-wrap']) != null) {
      pv.setPropertyValue('IsTextWrapped', value);
    }
    if ((value = options['horizontal-align']) != null) {
      pv.setPropertyValue('HoriJustify', value);
    }
    if ((value = options['vertical-align']) != null) {
      pv.setPropertyValue('VertJustify', value);
    }
    return null;
  };

  this.range_ref_from_xy = function(xy0, xy1) {
    return (this.cell_ref_from_xy.apply(this, xy0)).concat(':', this.cell_ref_from_xy.apply(this, xy1));
  };

  this.cell_ref_from_xy = function(x, y, x_is_relative, y_is_relative) {
    if (x_is_relative == null) {
      x_is_relative = true;
    }
    if (y_is_relative == null) {
      y_is_relative = true;
    }
    return (this.xref_from_x(x, x_is_relative)) + (this.yref_from_y(y, y_is_relative));
  };

  this.xref_from_x = function(x, is_relative) {
    var R, last_idx;
    if (is_relative == null) {
      is_relative = true;
    }
    R = x.toString(26);
    last_idx = R.length - 1;
    R = R.replace(/[0-9]/g, function(digit, idx) {
      return String.fromCharCode(0x11 + (digit.charCodeAt(0)) - (idx === last_idx ? 0 : 1));
    });
    R = R.replace(/[a-z]/g, function(letter, idx) {
      return String.fromCharCode((letter.charCodeAt(0)) - 0x16 - (idx === last_idx ? 0 : 1));
    });
    if (is_relative) {
      return R;
    } else {
      return '$' + R;
    }
  };

  this.yref_from_y = function(y, is_relative) {
    var R;
    if (is_relative == null) {
      is_relative = true;
    }
    R = (y + 1).toString(10);
    if (is_relative) {
      return R;
    } else {
      return '$' + R;
    }
  };

  this.get_text_range = function() {
    var oDoc, xText, xTextDoc, xTextRange;
    throw 'XXXXXXXX';
    oDoc = this.get_current_doc();
    xTextDoc = UnoRuntime.queryInterface(XTextDocument, oDoc);
    xText = xTextDoc.getText();
    return xTextRange = xText.getEnd();
  };

  this.set_text = function(text) {
    var text_range;
    throw 'XXXXXXXX';
    text_range = this.get_text_range();
    text_range.setString(text);
    return null;
  };

}).call(this);
